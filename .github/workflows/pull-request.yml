name: 'pull-request'

on:
  pull_request:
    branches: [ 'main' ]


jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: docker/login-action@v1
        with:
          username: fortysevenbot
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - uses: int128/kaniko-action@v1
        with:
          push: true
          tags: bmltenabled/dijon:${{ steps.vars.outputs.sha_short }}
          cache: true
          cache-repository: ${{ github.repository }}/cache


#jobs:
#  job1:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Fail
#        run: |
#          exit 1
#  run-if-failed:
#    runs-on: ubuntu-latest
#    needs: [job1]
##    if: always() && (needs.job1.result == 'failure' || needs.job2.result == 'failure')
#    steps:
#      - name: Needs context
#        env:
#          NEEDS_CONTEXT: ${{ toJSON(needs) }}
#        run: |
#          echo "$NEEDS_CONTEXT"



#name: 'pull-request'
#
#on:
#  pull_request:
#    branches: [ 'main' ]
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: docker/login-action@v1
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#      - name: Set outputs
#        id: vars
#        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
#      - uses: int128/kaniko-action@v1
#        with:
#          push: true
#          tags: ghcr.io/${{ github.repository }}:${{ steps.vars.outputs.sha_short }}
#          cache: true
#          cache-repository: ghcr.io/${{ github.repository }}/cache
#  tests:
#    runs-on: ubuntu-latest
#    services:
#      mariadb:
#        image: mariadb:latest
#        ports:
#          - 3306
#        env:
#          MYSQL_USER: dijon
#          MYSQL_PASSWORD: dijon
#          MYSQL_DATABASE: dijon
#          MYSQL_ROOT_PASSWORD: dijon
#        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
#
#    steps:
#      - uses: actions/checkout@v1
#
#      - name: Verify MariaDB connection
#        env:
#          DBPORT: ${{ job.services.mariadb.ports[3306] }}
#        run: |
#          while ! mysqladmin ping -h"127.0.0.1" -P"$DBPORT" --silent; do
#            sleep 1
#          done
#
#      - name: Set up Python 3.9
#        uses: actions/setup-python@v1
#        with:
#          python-version: 3.9
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install poetry
#          poetry install
#      - name: Run Tests
#        env:
#          DYNACONF_DBPORT: ${{ job.services.mariadb.ports[3306] }}
#        run: |
#          make test
#  build:
#    runs-on: ubuntu-latest
#    container:
#      image: 'gcr.io/kaniko-project/executor:debug'
#    name: Build image
#    steps:
#      - uses: actions/checkout@v1
#        with:
#          entrypoint: ""
#      - name: Build image
#        run: |
#          pwd
#          ls -a
#          mkdir -p /kaniko/.docker
#          echo "{\"credsStore\":\"ecr-login\"}" > /kaniko/.docker/config.json
#          /kaniko/executor \
#            --context=/__w/testthethings/testthethings \
#            --dockerfile=Dockerfile \
#            --destination dijon:mustard \
#            --no-push
